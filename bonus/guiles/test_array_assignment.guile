(define (make-generator procedure)
  (define last-return values)
  (define last-value #f)
  (define (last-continuation _)
    (let ((result (procedure yield)))
      (last-return result)))
  (define (yield value)
    (call/cc (lambda (continuation)
               (set! last-value value)
               (last-return value))))
  (lambda args
    (call/cc (lambda (return)
               (set! last-return return)
                 (if (null? args)
                   (last-continuation last-value)
                   (apply last-continuation args))))))
(define main (lambda () (make-generator (lambda (return) (define a (make-array 0 '(1 5) )) (define b 0) (define c (make-array 0 '(1 2) '(1 5) ))   (begin (display "a[1..5]:") (newline) (set! b 1) (letrec ([loop (lambda () (if (<= b 5) (begin (begin (array-cell-set! a (+ b 1) b ) (display (array-cell-ref a b )) (newline) (set! b (+ b 1)) ) (loop))))]) (loop)) (display "c[1][1..5]:") (newline) (set! b 1) (letrec ([loop (lambda () (if (<= b 5) (begin (begin (display (array-cell-ref c 1 b )) (newline) (set! b (+ b 1)) ) (loop))))]) (loop)) (display "c[1] := a[1..5];") (newline) (array-cell-set! c a 1 ) (display "c[1][1..5]:") (newline) (set! b 1) (letrec ([loop (lambda () (if (<= b 5) (begin (begin (display (array-cell-ref c 1 b )) (newline) (set! b (+ b 1)) ) (loop))))]) (loop)) (display "a[1] := 100;") (newline) (array-cell-set! a 100 1 ) (display "c[1][1..5]:") (newline) (set! b 1) (letrec ([loop (lambda () (if (<= b 5) (begin (begin (display (array-cell-ref c 1 b )) (newline) (set! b (+ b 1)) ) (loop))))]) (loop)) )))))

((main))