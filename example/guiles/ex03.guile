(define (make-generator procedure)
  (define last-return values)
  (define last-value #f)
  (define (last-continuation _)
    (let ((result (procedure yield)))
      (last-return result)))
  (define (yield value)
    (call/cc (lambda (continuation)
               (set! last-value value)
               (last-return value))))
  (lambda args
    (call/cc (lambda (return)
               (set! last-return return)
                 (if (null? args)
                   (last-continuation last-value)
                   (apply last-continuation args))))))
(define main (lambda () (make-generator (lambda (return)   (begin (display (+ 1 2)) (newline) (display (- 1 2)) (newline) (display (* 1 2)) (newline) (display (/ 1 2)) (newline) (display (+ 1 2)) (newline) (display (- 1 2)) (newline) (display (* 1 2)) (newline) (display (/ 1 2)) (newline) (display (> 1 2)) (newline) (display (< 1 2)) (newline) (display (eq? 1 2)) (newline) (display (<= 1 2)) (newline) (display (>= 1 2)) (newline) (display (not (eq? 1 2))) (newline) (display (> 1 2)) (newline) (display (< 1 2)) (newline) (display (eq? 1 2)) (newline) (display (<= 1 2)) (newline) (display (>= 1 2)) (newline) (display (not (eq? 1 2))) (newline) (display (string-append "1" "2")) (newline) )))))

((main))