(define (make-generator procedure)
  (define last-return values)
  (define last-value #f)
  (define (last-continuation _)
    (let ((result (procedure yield)))
      (last-return result)))
  (define (yield value)
    (call/cc (lambda (continuation)
               (set! last-value value)
               (last-return value))))
  (lambda args
    (call/cc (lambda (return)
               (set! last-return return)
                 (if (null? args)
                   (last-continuation last-value)
                   (apply last-continuation args))))))
(define main (lambda () (make-generator (lambda (return) (define a 0)(define b 0)(define c 0)(define u 0) (define d (make-array 0 '(1 10) )) (define e (make-array 0.0 '(1 10) )) (define g 0.0)(define h 0.0)(define x 0.0) (define k (make-array 0.0 '(23 57) '(23 57) )) (define l (make-array 0 '(23 57) '(23 57) ))  (define sort (lambda (a  ) (make-generator (lambda (return) (define b 0) (begin (set! c b) ))))) (define addition (lambda (a b  ) (make-generator (lambda (return) (begin (return (+ a b)) ))))) (define ggyy (lambda (g h  ) (make-generator (lambda (return) (begin (return (+ g h)) )))))  (begin (set! c ((addition 8 8 ))) (display c) (newline) (set! c ((addition (- 8) (- 8) ))) (display c) (newline) (set! x ((ggyy 3.3 5.5 ))) (display x) (newline) (set! b 0) (if (> b a) (begin (set! a 111)) (begin (set! a 222))) (display a) (newline) (if (< b a) (begin (set! a 111)) (begin (set! a 222))) (display a) (newline) (if (eq? b a) (begin (set! a 111)) (begin (set! a 222))) (display a) (newline) (if (>= b a) (begin (set! a 111)) (begin (set! a 222))) (display a) (newline) (if (<= b a) (begin (set! a 111)) (begin (set! a 222))) (display a) (newline) (if (not (eq? b 0)) (begin (set! a 111)) (begin (set! a 222))) (display a) (newline) (set! a 1) (letrec ([loop (lambda () (if (< a 5) (begin (begin (display a) (newline) (set! a (+ a 1)) ) (loop))))]) (loop)) (begin (set! b 1) (letrec ([loop (lambda () (if (< b 11) (begin (begin (array-cell-set! d (+ b (* b (+ b 3))) b ) (set! b (+ b 1)) ) (loop))))]) (loop)) ) (array-cell-set! e 9.99 3 ) (array-cell-set! k 3.14 25 26 ) (array-cell-set! l 88 28 26 ) (display a) (newline) (set! u (array-cell-ref d 5 )) (display u) (newline) (set! g (array-cell-ref e 3 )) (display g) (newline) (set! g (array-cell-ref k 25 26 )) (display g) (newline) (set! u (array-cell-ref l 28 26 )) (display u) (newline) (set! u (- (+ 9 9) 10)) (display u) (newline) (set! u (+ (- (+ (/ (+ 9 9) 3) (* 5 2)) 1) u)) (display u) (newline) )))))

((main))