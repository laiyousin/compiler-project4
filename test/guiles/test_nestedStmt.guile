(define (make-generator procedure)
  (define last-return values)
  (define last-value #f)
  (define (last-continuation _)
    (let ((result (procedure yield)))
      (last-return result)))
  (define (yield value)
    (call/cc (lambda (continuation)
               (set! last-value value)
               (last-return value))))
  (lambda args
    (call/cc (lambda (return)
               (set! last-return return)
                 (if (null? args)
                   (last-continuation last-value)
                   (apply last-continuation args))))))
(define main (lambda () (make-generator (lambda (return) (define a 0)(define b 0)(define d 0)   (begin (set! a 1) (set! b 7) (set! d 9) (if (< a (+ b 3)) (begin (begin (if (> (+ a 5) (- b 2)) (begin (begin (letrec ([loop (lambda () (if (< a b) (begin (begin (letrec ([loop (lambda () (if (< b 11) (begin (begin (set! b (+ b 2)) ) (loop))))]) (loop)) (set! a (+ a 10)) ) (loop))))]) (loop)) )) (begin (set! d (+ d 100)))) )) (begin (set! d (+ d 1000)))) (display a) (newline) (display b) (newline) (display d) (newline) )))))

((main))