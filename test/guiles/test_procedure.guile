(define (make-generator procedure)
  (define last-return values)
  (define last-value #f)
  (define (last-continuation _)
    (let ((result (procedure yield)))
      (last-return result)))
  (define (yield value)
    (call/cc (lambda (continuation)
               (set! last-value value)
               (last-return value))))
  (lambda args
    (call/cc (lambda (return)
               (set! last-return return)
                 (if (null? args)
                   (last-continuation last-value)
                   (apply last-continuation args))))))
(define main (lambda () (make-generator (lambda (return) (define a 0)(define b 0) (define c 0.0)  (define ss (lambda () (make-generator (lambda (return) (begin (return (+ 3 (* 4 5))) ))))) (define tt (lambda () (make-generator (lambda (return) (begin (set! a (+ (+ ((ss)) (* 33 ((ss)))) a)) (set! c 0.5) )))))  (begin (set! a (+ (* ((ss)) ((ss))) ((ss)))) ((tt)) ((tt)) ((tt)) (display a) (newline) )))))

((main))