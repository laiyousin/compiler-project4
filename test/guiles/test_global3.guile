(define (make-generator procedure)
  (define last-return values)
  (define last-value #f)
  (define (last-continuation _)
    (let ((result (procedure yield)))
      (last-return result)))
  (define (yield value)
    (call/cc (lambda (continuation)
               (set! last-value value)
               (last-return value))))
  (lambda args
    (call/cc (lambda (return)
               (set! last-return return)
                 (if (null? args)
                   (last-continuation last-value)
                   (apply last-continuation args))))))
(define main (lambda () (make-generator (lambda (return) (define a 0)(define b 0) (define c 0.0)  (define tt (lambda () (make-generator (lambda (return) (define a (make-array 0 '(1 2) ))(define b (make-array 0 '(1 2) )) (begin (array-cell-set! a 10 1 ) (array-cell-set! b (+ (array-cell-ref a 1 ) 11) 1 ) (return (array-cell-ref b 1 )) )))))  (begin (set! a 3) (set! b 4) (display ((tt))) (newline) )))))

((main))